[
  {
    "Id": "640162",
    "ThreadId": "264599",
    "Html": "\r\n<p>I am writing a generic check that allows the user run a PowerShell script as the body of the check.&nbsp;&nbsp; I want the user to be able to pass parameters the script.&nbsp; I could not find where the&nbsp;<span style=\"color:#2b91af\">PluginConfigBase<span style=\"color:#000000\">\r\n subclasses are read and populated.&nbsp; Below is an example of how a PowerShell health check configuration could look like.&nbsp; The PowerShell script will return either a HealthCheckData object or something that a HealthCheckData object can be created from.&nbsp;\r\n I intend to allow the user to specify the PowerShell script inline or reference an external file system based script.</span></span></p>\r\n<p><span style=\"color:#2b91af\"><span style=\"color:#000000\">Is there a way to hook into configuration reading?&nbsp; Perhaps there is a way to allow a plugin to specify a custom configuration reader (using an attribute?).&nbsp; Any suggestions?</span></span></p>\r\n<p><span style=\"color:#2b91af\"><span style=\"color:#000000\">Once my code has been properly tested, I would like to submit it to the Wolfpack project.</span></span></p>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\"><span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515\">component</span><span style=\"color:blue\">&nbsp;</span><span style=\"color:red\">id</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\"><span style=\"color:blue\">PowershellHealthCheck</span>Config</span>&quot;\r\n<span style=\"color:blue\">\t\t\t\t&nbsp;&nbsp;&nbsp;</span><span style=\"color:red\">lifestyle</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">singleton</span>&quot;\r\n<span style=\"color:blue\">\t\t\t\t&nbsp;&nbsp;&nbsp;</span><span style=\"color:red\">type</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">PowershellHealthCheck,&nbsp;Wolfpack.Contrib</span>&quot;<span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515\">parameters</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515\">ScriptName</span><span style=\"color:blue\">&gt;</span>MyScript.ps1<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\"><span style=\"color:#a31515\">ScriptName</span></span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515\">ScriptBody</span><span style=\"color:blue\">&gt;</span>&lt;![CDATA[ $x = callSomeFunction(); return $x; ]]&gt;<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\"><span style=\"color:#a31515\">ScriptBody</span></span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515\">SnapIns</span><span style=\"color:blue\">&gt;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;<span style=\"color:#a31515\">list</span><span style=\"color:blue\">&gt;<br>          <span style=\"color:blue\">&lt;<span style=\"color:#a31515\">item</span><span style=\"color:blue\">&gt;SqlServerProviderSnapin100<span style=\"color:blue\">&lt;/<span style=\"color:#a31515\">item</span><span style=\"color:blue\">&gt;</span></span><br></span></span><br>         <span style=\"color:blue\">&lt;/<span style=\"color:#a31515\">list</span><span style=\"color:blue\">&gt;</span><br></span></span><br></span></span><span style=\"color:blue\">        </span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\"><span style=\"color:#a31515\">SnapIns</span></span><span style=\"color:blue\">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;<span style=\"color:#a31515\">ScriptParameters</span><span style=\"color:blue\">&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;<span style=\"color:#a31515\">ScriptParameter</span><span style=\"color:blue\">&gt;&lt;<span style=\"color:#a31515\">Name</span><span style=\"color:blue\">&gt;timeout&lt;/<span style=\"color:#a31515\">Name</span><span style=\"color:blue\">&gt;&lt;<span style=\"color:#a31515\">Value</span><span style=\"color:blue\">&gt;100&lt;/<span style=\"color:#a31515\">Value</span><span style=\"color:blue\">&gt;</span></span></span></span>&lt;/<span style=\"color:#a31515\">ScriptParameter</span><span style=\"color:blue\">&gt;<br>          &lt;<span style=\"color:#a31515\">ScriptParameter</span><span style=\"color:blue\">&gt;&lt;<span style=\"color:#a31515\">Name</span><span style=\"color:blue\">&gt;storedProcName&lt;/<span style=\"color:#a31515\">Name</span><span style=\"color:blue\">&gt;&lt;<span style=\"color:#a31515\">Value</span><span style=\"color:blue\">&gt;MyStoredProcedure&lt;/<span style=\"color:#a31515\">Value</span><span style=\"color:blue\">&gt;</span></span></span></span>&lt;/<span style=\"color:#a31515\">ScriptParameter</span><span style=\"color:blue\">&gt;</span></span><span style=\"color:blue\"><br></span></span></span><span style=\"color:blue\"><br></span></span><span style=\"color:blue\">        &lt;/<span style=\"color:#a31515\">ScriptParameters</span><span style=\"color:blue\">&gt;</span></span></span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span style=\"color:#a31515\">parameters</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span style=\"color:#a31515\">component</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n",
    "PostedDate": "2011-07-10T14:54:33.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "640632",
    "ThreadId": "264599",
    "Html": "<p>Hi - first up...great idea! When you get this up and running I'll include it directly into the codebase as a Core feature...I think it would be a very cool addition!</p>\r\n<p>Ok, a quick recap on how Wolfpack, config and HealthChecks hang together.</p>\r\n<p>The config xml you see (and have provided above) is for the Castle/Windsor IoC container. It is Castle/Windsor that reads this and loads the IoC container with the object it relates to (which is why you can't find the config loader code, it's inside Castle). Wolfpack does something slightly different than normal though - the object you put in the config is not the health check itself but a configuration object to a health check (PS: your xml above needs a tweak, the type should be \"<span style=\"font-family: Consolas, 'Courier New', Courier, monospace; white-space: pre;\">PowershellHealthCheck<strong>Config</strong></span>\" - the reason is that Wolfpack uses a naming convention to auto-load the actual health check component based on the configuration component type name; if your config component type name is \"PowershellHealthCheck<strong>Config</strong>\" then your health check name MUST BE \"PowershellHealthCheck\" (minus the <strong>Config</strong>) - this means that we can avoid having to provide additional IoC xml configuration to the health check objects.&nbsp;</p>\r\n<p>Right, so your example config code looks fine apart from the ScriptParameters bit. As I said it's Castle/Windsor configuration xml so we need to conform to it's schema. To provide named parameters you would use a dictionary....</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;parameters&gt;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;ScriptArgs&gt;</p>\r\n<p>&nbsp; &nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>&lt;dictionary&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;entry key=\"local\"&gt;http://localhost:80&lt;/entry&gt;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;entry key=\"castle\"&gt;http://castleproject.org&lt;/entry&gt;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;/dictionary&gt;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;/ScriptArgs&gt;</p>\r\n<p><span style=\"white-space: pre;\"> </span>&lt;/parameters&gt;</p>\r\n<p>You could then spin through the dictionary in the health check, grab the key/value items and pass them as a parameters to the PS runtime pipeline. As a parting shot I'd also suggest just getting it running from a script file, then enhance it to deal with inline PS script. I've been toying with this health check myself and have a few links that might help you out...</p>\r\n<p><a href=\"http://gotspeech.net/blogs/marshallharrison/archive/2011/01/07/calling-powershell-from-c.aspx\">http://gotspeech.net/blogs/marshallharrison/archive/2011/01/07/calling-powershell-from-c.aspx</a></p>\r\n<p><a href=\"http://www.codeproject.com/KB/cs/HowToRunPowerShell.aspx\">http://www.codeproject.com/KB/cs/HowToRunPowerShell.aspx</a></p>\r\n<p>Please let me know how you are getting on or if you need any assistance....I'm really keen to see this in Wolfpack!</p>\r\n<p>Cheers,</p>\r\n<p>James</p>",
    "PostedDate": "2011-07-11T12:57:16.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "640702",
    "ThreadId": "264599",
    "Html": "<p><span style=\"color: black; font-size: 10pt;\">Great. I will see if I have time tonight to look at your suggestions. As for the PowerShell side of things, I already have all the code in place to call and execute PowerShell scripts. I have also created some basic unit tests (MSTest). I will convert the unit tests NUnit for easier integration with the main framework. I still have to test the ability to abort an executing PowerShell script. I hope to provide some good samples that can be included.</span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\">I hope to have something stable by end of next weekend (July 17) that I can share with you. I'll let you know if I require any assistance.</span></p>",
    "PostedDate": "2011-07-11T15:37:29.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]